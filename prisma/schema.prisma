generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categorias {
  id             Int             @id @default(autoincrement())
  nombre         String          @db.VarChar(100)
  slug           String          @unique @db.VarChar(100)
  descripcion    String?
  imagen_url     String?         @db.VarChar(255)
  fecha_creacion DateTime        @default(now()) @db.Timestamp(6)
  productos      productos[]
  subcategorias  subcategorias[]
}

model estadoorden {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(50)
  descripcion String?
  es_final    Boolean   @default(false)
  ordenes     ordenes[]
}

model estadopago {
  id            Int             @id @default(autoincrement())
  nombre        String          @db.VarChar(50)
  descripcion   String?
  es_final      Boolean         @default(false)
  transacciones transacciones[]
}

model orden_promociones {
  orden_id        Int
  promocion_id    Int
  monto_descuento Decimal     @db.Decimal(10, 2)
  ordenes         ordenes     @relation(fields: [orden_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  promociones     promociones @relation(fields: [promocion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([orden_id, promocion_id])
}

model ordenes {
  id                Int                 @id @default(autoincrement())
  usuario_id        Int
  estado_orden_id   Int
  transaccion_id    Int
  fecha             DateTime            @default(now()) @db.Timestamp(6)
  total             Decimal             @db.Decimal(10, 2)
  direccion_envio   String?
  tracking_number   String?             @db.VarChar(50)
  notas             String?
  orden_promociones orden_promociones[]
  estadoorden       estadoorden         @relation(fields: [estado_orden_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transacciones     transacciones       @relation(fields: [transaccion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuarios          usuarios            @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ordenitems        ordenitems[]

  @@index([usuario_id], map: "idx_ordenes_usuario_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ordenitems {
  id              Int      @id @default(autoincrement())
  orden_id        Int
  cantidad        Int
  precio_unitario Decimal  @db.Decimal(10, 2)
  descuento       Decimal? @default(0) @db.Decimal(10, 2)
  ordenes         ordenes  @relation(fields: [orden_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([orden_id], map: "idx_orden_items_orden_id")
}

model pagos {
  id            Int             @id @default(autoincrement())
  nombre        String          @db.VarChar(100) // MercadoPago, PayPal, etc.
  detalle       String?         // descripción del pago
  activo        Boolean         @default(true)
  icono         String?         @db.VarChar(50)
  transacciones transacciones[] // transacciones asociadas

  usuario_id    Int?            // Nuevo: usuario que realizó el pago (opcional)
  usuario usuarios? @relation(fields: [usuario_id], references: [id], name: "PagoUsuario")
}


/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model productos {
  id               Int                @id @default(autoincrement())
  nombre           String             @db.VarChar(100)
  slug             String             @unique @db.VarChar(100)
  descripcion      String?
  precio_base      Decimal            @db.Decimal(10, 2)
  categoria_id     Int?
  subcategoria_id  Int?
  activo           Boolean            @default(true)
  fecha_creacion   DateTime           @default(now()) @db.Timestamp(6)
  stock            Int                @default(0)
  color_nombre     String?            @db.VarChar(50)
  color_codigo_hex String?            @db.VarChar(7)
  talle            String?            @db.VarChar(10)
  imagen_principal String?            @db.VarChar(255)
  producto_base_id Int?
  carrito_producto carrito_producto[]
  productos        productos?         @relation("productosToproductos", fields: [producto_base_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_producto_base")
  other_productos  productos[]        @relation("productosToproductos")
  categorias       categorias?        @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategorias    subcategorias?     @relation(fields: [subcategoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([categoria_id], map: "idx_productos_categoria_id")
  @@index([subcategoria_id], map: "idx_productos_subcategoria_id")
  @@index([producto_base_id], map: "idx_productos_producto_base_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model promociones {
  id                Int                 @id @default(autoincrement())
  codigo            String              @unique @db.VarChar(30)
  descripcion       String?
  porcentaje_desc   Decimal?            @db.Decimal(5, 2)
  monto_desc        Decimal?            @db.Decimal(10, 2)
  fecha_inicio      DateTime            @db.Timestamp(6)
  fecha_fin         DateTime            @db.Timestamp(6)
  uso_maximo        Int                 @default(1)
  uso_por_usuario   Int                 @default(1)
  minimo_compra     Decimal?            @db.Decimal(10, 2)
  aplica_categorias Json?
  aplica_productos  Json?
  activo            Boolean             @default(true)
  orden_promociones orden_promociones[]

  @@index([activo], map: "idx_promociones_activo")
  @@index([codigo], map: "idx_promociones_codigo")
}

model subcategorias {
  id             Int         @id @default(autoincrement())
  nombre         String      @db.VarChar(100)
  slug           String      @unique @db.VarChar(100)
  descripcion    String?
  categoria_id   Int
  imagen_url     String?     @db.VarChar(255)
  fecha_creacion DateTime    @default(now()) @db.Timestamp(6)
  productos      productos[]
  categorias     categorias  @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([nombre, categoria_id], map: "uq_subcategoria_categoria")
  @@index([categoria_id], map: "idx_subcategorias_categoria_id")
}

model talles {
  id     Int    @id @default(autoincrement())
  nombre String @unique @db.VarChar(50)
  orden  Int    @default(0) @db.SmallInt
}

model transacciones {
  id                 Int          @id @default(autoincrement())
  usuario_id         Int?         // AHORA OPCIONAL
  monto_total        Decimal      @db.Decimal(10, 2)
  fecha              DateTime     @default(now()) @db.Timestamp(6)
  estado_pago_id     Int
  forma_pago_id      Int?         // AHORA OPCIONAL
  codigo_transaccion String?      @unique @db.VarChar(50)
  datos_adicionales  Json?
  ordenes            ordenes[]

  // Relaciones
  estadopago         estadopago   @relation(fields: [estado_pago_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pagos              pagos?       @relation(fields: [forma_pago_id], references: [id]) // OPCIONAL
  usuarios           usuarios?    @relation(fields: [usuario_id], references: [id])

  @@index([usuario_id], map: "idx_transacciones_usuario_id")
}

model usuarios {
  id             Int             @id @default(autoincrement())
  nombre         String          @db.VarChar(100)
  email          String          @unique @db.VarChar(100)
  contrase_a     String          @map("contraseña") @db.VarChar(255)
  rol            String          @db.VarChar(50)
  telefono       String?         @db.VarChar(20)
  fecha_creacion DateTime        @default(now()) @db.Timestamp(6)
  carrito        carrito?
  ordenes        ordenes[]
  transacciones  transacciones[]

  pagos   pagos[]  @relation("PagoUsuario")
}

model carrito {
  id               Int                @id @default(autoincrement())
  usuario_id       Int?                @unique
  fecha_creacion   DateTime?          @default(now()) @db.Timestamp(6)
  usuarios         usuarios?           @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_carrito_usuario")
  carrito_producto carrito_producto[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model carrito_producto {
  id          Int       @id @default(autoincrement())
  carrito_id  Int
  producto_id Int
  cantidad    Int
  carrito     carrito   @relation(fields: [carrito_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cp_carrito")
  productos   productos @relation(fields: [producto_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cp_producto")

  @@unique([carrito_id, producto_id], map: "unique_carrito_producto")
}
