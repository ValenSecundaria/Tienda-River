generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categorias {
  id          Int         @id @default(autoincrement())
  nombre      String      @db.VarChar(100)
  slug        String      @unique @db.VarChar(100)
  descripcion String?
  productos   productos[]
}

model colores {
  id               Int                @id @default(autoincrement())
  nombre           String             @unique @db.VarChar(50)
  codigo_hex       String             @db.VarChar(7)
  productovariante productovariante[]
}

model estadoorden {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(50)
  descripcion String?
  ordenes     ordenes[]
}

model estadopago {
  id            Int             @id @default(autoincrement())
  nombre        String          @db.VarChar(50)
  descripcion   String?
  transacciones transacciones[]
}

model orden_promociones {
  orden_id     Int        // <-- Cambiado de BigInt a Int para igualar `ordenes.id`
  promocion_id BigInt

  ordenes      ordenes     @relation(fields: [orden_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  promociones  promociones @relation(fields: [promocion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([orden_id, promocion_id])
}

model ordenes {
  id                Int                 @id @default(autoincrement())
  usuario_id        Int
  estado_orden_id   Int
  transaccion_id    Int
  fecha             DateTime            @default(now()) @db.Timestamp(6)
  total             Decimal             @db.Decimal(10, 2)
  orden_promociones orden_promociones[]
  estadoorden       estadoorden         @relation(fields: [estado_orden_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transacciones     transacciones       @relation(fields: [transaccion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuarios          usuarios            @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ordenitems        ordenitems[]

  @@index([usuario_id], map: "idx_ordenes_usuario_id")
}

/// Este modelo tenía `orden_id Int` (ya coincide con `ordenes.id Int`)
model ordenitems {
  id                   Int              @id @default(autoincrement())
  orden_id             Int
  producto_variante_id Int
  cantidad             Int
  precio_unitario      Decimal          @db.Decimal(10, 2)
  ordenes              ordenes          @relation(fields: [orden_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productovariante     productovariante @relation(fields: [producto_variante_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pagos {
  id            Int             @id @default(autoincrement())
  nombre        String          @db.VarChar(100)
  detalle       String?
  activo        Boolean         @default(true)
  transacciones transacciones[]
}

model productos {
  id               Int                @id @default(autoincrement())
  nombre           String             @db.VarChar(100)
  descripcion      String?
  precio_base      Decimal            @db.Decimal(10, 2)
  categoria_id     Int
  activo           Boolean            @default(true)
  fecha_creacion   DateTime           @default(now()) @db.Timestamp(6)
  imagen_url       String?            @db.VarChar(255)
  categorias       categorias         @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productovariante productovariante[]

  @@index([categoria_id], map: "idx_productos_categoria_id")
}

model productovariante {
  id          Int          @id @default(autoincrement())
  producto_id Int
  talle_id    Int
  color_id    Int
  stock       Int
  sku         String       @unique @db.VarChar(100)
  imagen      String?      @db.VarChar(255)
  ordenitems  ordenitems[]
  colores     colores      @relation(fields: [color_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productos   productos    @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  talles      talles       @relation(fields: [talle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([producto_id], map: "idx_producto_variante_producto_id")
}

model promociones {
  id                BigInt              @id @default(autoincrement())
  codigo            String              @unique @db.VarChar(30)
  descripcion       String?
  porcentaje_desc   Decimal?            @db.Decimal(5, 2)
  uso_maximo        Int                 @default(1)
  uso_por_usuario   Int                 @default(1)
  orden_promociones orden_promociones[]
}

model talles {
  id               Int                @id @default(autoincrement())
  nombre           String             @unique @db.VarChar(50)
  productovariante productovariante[]
}

model transacciones {
  id             Int        @id @default(autoincrement())
  usuario_id     Int
  monto_total    Decimal    @db.Decimal(10, 2)
  fecha          DateTime   @default(now()) @db.Timestamp(6)
  estado_pago_id Int
  forma_pago_id  Int
  ordenes        ordenes[]
  estadopago     estadopago @relation(fields: [estado_pago_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pagos          pagos      @relation(fields: [forma_pago_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuarios       usuarios   @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([usuario_id], map: "idx_transacciones_usuario_id")
}

model usuarios {
  id             Int             @id @default(autoincrement())
  nombre         String          @db.VarChar(100)
  email          String          @unique @db.VarChar(100)
  contraseña     String          @map("contraseña") @db.VarChar(255)
  rol            String          @db.VarChar(50)
  telefono       String?         @db.VarChar(20)
  fecha_creacion DateTime        @default(now()) @db.Timestamp(6)
  ordenes        ordenes[]
  transacciones  transacciones[]
}
